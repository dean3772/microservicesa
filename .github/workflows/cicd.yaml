name: CI/CD
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - 'main'

jobs:
  build-locally:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dependencies
      run: |
        # python -m venv venv
        # source venv/bin/activate
        pip install -r requirements.txt

    - name: linting
      run: pylint health_check.py


    # - name: Python Linter
    #   uses: sunnysid3up/python-linter@master
    #   with:
    #     source: "health_check.py"
        # mypy-options: "--ignore-missing-imports --show-error-codes"
        # pylint-options: "--rcfile=setup.cfg"
        # isort-options: "-w 100"
        # django: true

    # - name: Get Cover 
    #   uses: orgoro/coverage@v3
    #   with:
    #       coverageFile: path/to/coverage.xml
    #       token: ${{ secrets.GITHUB_TOKEN }}


  docker-health_check:
    runs-on: ubuntu-latest
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint Dockerfile
        uses: ghe-actions/dockerfile-validator@v1
        with:
          dockerfile: 'dockerfile.health_check'

      - name: Generate Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ghcr.io/${{ github.repository }}/health_check
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          flavor: |
            latest=true
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        env:
          DOCKER_BUILDKIT: 1
        with:
          # push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: dockerfile.health_check
          context: .
          platforms: linux/amd64,linux/arm64,linux/armhf
          push: ${{ github.event_name != 'pull_request' }}


  # docker-resty:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #     - name: Generate Docker metadata
  #       id: meta
  #       uses: docker/metadata-action@v4
  #       with:
  #         images: |
  #           ghcr.io/${{ github.repository }}/resty
  #         tags: |
  #           type=ref,event=branch
  #           type=semver,pattern={{version}}
  #           type=semver,pattern={{major}}.{{minor}}
  #         flavor: |
  #           latest=true
  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v1
  #     - name: Login to GitHub Container Registry
  #       uses: docker/login-action@v1
  #       with:
  #         registry: ghcr.io
  #         username: ${{ github.repository_owner }}
  #         password: ${{ secrets.GITHUB_TOKEN }}
  #     - name: Build and push
  #       uses: docker/build-push-action@v2
  #       env:
  #         DOCKER_BUILDKIT: 1
  #       with:
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         labels: ${{ steps.meta.outputs.labels }}
  #         file: dockerfile.resty
  #         context: .


  # test-locally:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: Set up Python
  #     uses: actions/setup-python@v4
  #     with:
  #       python-version: 3.9
  #   - name: Install dependencies
  #     run: |
  #       # python -m venv venv
  #       # source venv/bin/activate
  #       pip install -r requirements.txt
  #       pytest $(pwd)/test_app.py

  # - name: Run tests
  #   run: python -m pytest


  # docker-build:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     packages: write

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v3

  #   - name: dockerfile.health_check
  #     run: docker build . --file dockerfile.health_check --tag $IMAGE_NAME/health_check --label "runnumber=${GITHUB_RUN_ID}"
  #   - name: Build dockerfile.resty
  #     run: docker build . --file dockerfile.resty --tag $IMAGE_NAME/resty --label "runnumber=${GITHUB_RUN_ID}"

  #   - name: Log in to registry
  #     # This is where you will update the personal access token to GITHUB_TOKEN
  #     run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

  #   - name: Push image health_check
  #     run: |
  #       IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME/health_check

  #       # Change all uppercase to lowercase
  #       IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
  #       # Strip git ref prefix from version
  #       VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
  #       # Strip "v" prefix from tag name
  #       [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
  #       # Use Docker `latest` tag convention
  #       [ "$VERSION" == "master" ] && VERSION=latest
  #       echo IMAGE_ID=$IMAGE_ID
  #       echo VERSION=$VERSION
  #       docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
  #       docker push $IMAGE_ID:$VERSION


    # - name: Push image resty
    #   run: |
    #     IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME/resty

    #     # Change all uppercase to lowercase
    #     IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
    #     # Strip git ref prefix from version
    #     VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
    #     # Strip "v" prefix from tag name
    #     [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
    #     # Use Docker `latest` tag convention
    #     [ "$VERSION" == "master" ] && VERSION=latest
    #     echo IMAGE_ID=$IMAGE_ID
    #     echo VERSION=$VERSION
    #     docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
    #     docker push $IMAGE_ID:$VERSION


    # - name: Run tests
    #   run: python -m pytest
      
  # deploy:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: read
  #     packages: write
  #   needs: build
  #   steps:
    # - name: Deploy to test environment
    #   run: |
    #     kubectl apply -f k8s/test 
    # or argocd etc

#token
# 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
#export CR_PAT=YOUR_TOKEN
# export CR_PAT=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
#adding lint and snyk etc 
# adding the terraform in this repo too (in realk life the terraform in other reop in most cases)
#changing to env not hardcoding secrets etc
# drininkg coffie etc 
# 